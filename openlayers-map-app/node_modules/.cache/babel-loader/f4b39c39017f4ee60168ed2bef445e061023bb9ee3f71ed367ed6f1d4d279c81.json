{"ast":null,"code":"/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport { WebGLWorkerMessageType } from '../../render/webgl/constants.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, translate as translateTransform } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals } from '../../extent.js';\nimport { colorDecodeId, colorEncodeId } from '../../render/webgl/utils.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { fromUserCoordinate, getUserProjection } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { getWorldParameters } from './worldUtil.js';\nimport { listen, unlistenByKey } from '../../events.js';\n\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {boolean} [hitDetectionEnabled] Whether shader is hit detection aware.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = options.uniforms || {};\n    const projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses\n    });\n\n    /**\n     * @private\n     */\n    this.sourceRevision_ = -1;\n\n    /**\n     * @private\n     */\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    /**\n     * @private\n     */\n    this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = options.hitDetectionEnabled ?? true;\n    const customAttributes = options.attributes ? options.attributes.map(function (attribute) {\n      return {\n        name: 'a_prop_' + attribute.name,\n        size: 1,\n        type: AttributeType.FLOAT\n      };\n    }) : [];\n\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.attributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }];\n    if (this.hitDetectionEnabled_) {\n      this.attributes.push({\n        name: 'a_prop_hitColor',\n        size: 4,\n        type: AttributeType.FLOAT\n      });\n      this.attributes.push({\n        name: 'a_featureUid',\n        size: 1,\n        type: AttributeType.FLOAT\n      });\n    }\n    this.attributes.push(...customAttributes);\n    this.customAttributes = options.attributes ? options.attributes : [];\n\n    /**\n     * @private\n     */\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = projectionMatrixTransform;\n\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.renderTransform_ = createTransform();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.invertRenderTransform_ = createTransform();\n\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n    this.renderInstructions_ = new Float32Array(0);\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n    this.lastSentId = 0;\n\n    /**\n     * @private\n     */\n    this.worker_ = createWebGLWorker();\n    this.worker_.addEventListener('message',\n    /**\n     * @param {*} event Event.\n     */\n    event => {\n      const received = event.data;\n      if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n        const projectionTransform = received.projectionTransform;\n        this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n        this.helper.flushBufferData(this.verticesBuffer_);\n        this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n        this.helper.flushBufferData(this.indicesBuffer_);\n        this.renderTransform_ = projectionTransform;\n        makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n        this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n        if (received.id === this.lastSentId) {\n          this.ready = true;\n        }\n        this.getLayer().changed();\n      }\n    });\n\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n    this.featureCache_ = {};\n\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n    this.featureCount_ = 0;\n    const source = this.getLayer().getSource();\n    /**\n     * @private\n     */\n    this.sourceListenKeys_ = [listen(source, VectorEventType.ADDFEATURE, this.handleSourceFeatureAdded_, this), listen(source, VectorEventType.CHANGEFEATURE, this.handleSourceFeatureChanged_, this), listen(source, VectorEventType.REMOVEFEATURE, this.handleSourceFeatureDelete_, this), listen(source, VectorEventType.CLEAR, this.handleSourceFeatureClear_, this)];\n    source.forEachFeature(feature => {\n      this.featureCache_[getUid(feature)] = {\n        feature: feature,\n        properties: feature.getProperties(),\n        geometry: feature.getGeometry()\n      };\n      this.featureCount_++;\n    });\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    if (this.hitDetectionEnabled_) {\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n\n    // upload buffers again if any\n    if (this.verticesBuffer_.getArray()) {\n      this.helper.flushBufferData(this.verticesBuffer_);\n    }\n    if (this.indicesBuffer_.getArray()) {\n      this.helper.flushBufferData(this.indicesBuffer_);\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n    this.featureCount_++;\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    delete this.featureCache_[getUid(feature)];\n    this.featureCount_--;\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(frameState, this.getLayer());\n\n    // draw the normal canvas\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    if (this.hitDetectionEnabled_) {\n      // draw the hit buffer\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n    this.postRender(gl, frameState);\n    const canvas = this.helper.getCanvas();\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n      const renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    }\n    this.helper.useProgram(this.program_, frameState);\n    this.helper.prepareDraw(frameState);\n\n    // write new data\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n    return true;\n  }\n\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  rebuildBuffers_(frameState) {\n    // saves the projection transform for the current frame state\n    const projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\n    const userProjection = getUserProjection();\n    const baseInstructionLength = this.hitDetectionEnabled_ ? 7 : 2; // see below\n    const singleInstructionLength = baseInstructionLength + this.customAttributes.length;\n    const totalSize = singleInstructionLength * this.featureCount_;\n    if (!this.renderInstructions_ || this.renderInstructions_.length !== totalSize) {\n      this.renderInstructions_ = new Float32Array(totalSize);\n    }\n\n    // loop on features to fill the buffer\n    let featureCache, geometry;\n    const tmpCoords = [];\n    const tmpColor = [];\n    let idx = -1;\n    for (const featureUid in this.featureCache_) {\n      featureCache = this.featureCache_[featureUid];\n      geometry = /** @type {import(\"../../geom\").Point} */\n      featureCache.geometry;\n      if (!geometry || geometry.getType() !== 'Point') {\n        continue;\n      }\n      if (userProjection) {\n        const userCoords = fromUserCoordinate(geometry.getFlatCoordinates(), frameState.viewState.projection);\n        tmpCoords[0] = userCoords[0];\n        tmpCoords[1] = userCoords[1];\n      } else {\n        tmpCoords[0] = geometry.getFlatCoordinates()[0];\n        tmpCoords[1] = geometry.getFlatCoordinates()[1];\n      }\n      applyTransform(projectionTransform, tmpCoords);\n      this.renderInstructions_[++idx] = tmpCoords[0];\n      this.renderInstructions_[++idx] = tmpCoords[1];\n\n      // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n      if (this.hitDetectionEnabled_) {\n        const hitColor = colorEncodeId(idx + 5, tmpColor);\n        this.renderInstructions_[++idx] = hitColor[0];\n        this.renderInstructions_[++idx] = hitColor[1];\n        this.renderInstructions_[++idx] = hitColor[2];\n        this.renderInstructions_[++idx] = hitColor[3];\n        this.renderInstructions_[++idx] = Number(featureUid);\n      }\n\n      // pushing custom attributes\n      for (let j = 0; j < this.customAttributes.length; j++) {\n        const value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n        this.renderInstructions_[++idx] = value;\n      }\n    }\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: ++this.lastSentId,\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n      renderInstructions: this.renderInstructions_.buffer,\n      customAttributesSize: singleInstructionLength - 2\n    };\n    // additional properties will be sent back as-is by the worker\n    message['projectionTransform'] = projectionTransform;\n    this.ready = false;\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n    this.renderInstructions_ = null;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    assert(this.hitDetectionEnabled_, '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.');\n    if (!this.renderInstructions_ || !this.hitDetectionEnabled_) {\n      return undefined;\n    }\n    const pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const index = colorDecodeId(color);\n    const opacity = this.renderInstructions_[index];\n    const uid = Math.floor(opacity).toString();\n    const source = this.getLayer().getSource();\n    const feature = source.getFeatureByUid(uid);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Render the world, either to the main framebuffer or to the hit framebuffer\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\n    let world = startWorld;\n    this.helper.useProgram(this.program_, frameState);\n    if (forHitDetection) {\n      this.hitRenderTarget_.setSize([Math.floor(frameState.size[0] / 2), Math.floor(frameState.size[1] / 2)]);\n      this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n    }\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n      this.helper.applyHitDetectionUniform(forHitDetection);\n      const renderCount = this.indicesBuffer_.getSize();\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.worker_.terminate();\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n    super.disposeInternal();\n  }\n  renderDeclutter() {}\n}\nexport default WebGLPointsLayerRenderer;","map":{"version":3,"names":["BaseVector","VectorEventType","ViewHint","WebGLArrayBuffer","WebGLLayerRenderer","WebGLRenderTarget","ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","AttributeType","DefaultUniform","WebGLWorkerMessageType","apply","applyTransform","create","createTransform","makeInverse","makeInverseTransform","multiply","multiplyTransform","translate","translateTransform","assert","buffer","createEmpty","equals","colorDecodeId","colorEncodeId","createWebGLWorker","fromUserCoordinate","getUserProjection","getUid","getWorldParameters","listen","unlistenByKey","WebGLPointsLayerRenderer","constructor","layer","options","uniforms","projectionMatrixTransform","PROJECTION_MATRIX","postProcesses","sourceRevision_","verticesBuffer_","indicesBuffer_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","program_","hitDetectionEnabled_","hitDetectionEnabled","customAttributes","attributes","map","attribute","name","size","type","FLOAT","push","previousExtent_","currentTransform_","renderTransform_","invertRenderTransform_","renderInstructions_","Float32Array","hitRenderTarget_","lastSentId","worker_","addEventListener","event","received","data","GENERATE_POINT_BUFFERS","projectionTransform","fromArrayBuffer","vertexBuffer","helper","flushBufferData","indexBuffer","renderInstructions","id","ready","getLayer","changed","featureCache_","featureCount_","source","getSource","sourceListenKeys_","ADDFEATURE","handleSourceFeatureAdded_","CHANGEFEATURE","handleSourceFeatureChanged_","REMOVEFEATURE","handleSourceFeatureDelete_","CLEAR","handleSourceFeatureClear_","forEachFeature","feature","properties","getProperties","geometry","getGeometry","afterHelperCreated","getProgram","getArray","renderFrame","frameState","gl","getGL","preRender","startWorld","endWorld","worldWidth","renderWorlds","finalizeDraw","dispatchPreComposeEvent","dispatchPostComposeEvent","clearCachedData","postRender","canvas","getCanvas","prepareFrameInternal","vectorSource","viewState","viewNotMoving","viewHints","ANIMATING","INTERACTING","extentChanged","extent","sourceChanged","getRevision","projection","resolution","renderBuffer","getRenderBuffer","loadFeatures","rebuildBuffers_","slice","useProgram","prepareDraw","bindBuffer","enableAttributes","makeProjectionTransform","userProjection","baseInstructionLength","singleInstructionLength","length","totalSize","featureCache","tmpCoords","tmpColor","idx","featureUid","getType","userCoords","getFlatCoordinates","hitColor","Number","j","value","callback","message","customAttributesSize","postMessage","forEachFeatureAtCoordinate","coordinate","hitTolerance","matches","undefined","pixel","coordinateToPixelTransform","readPixel","color","index","opacity","uid","Math","floor","toString","getFeatureByUid","forHitDetection","world","setSize","prepareDrawToRenderTarget","applyUniforms","applyHitDetectionUniform","renderCount","getSize","drawElements","disposeInternal","terminate","forEach","key","renderDeclutter"],"sources":["/Users/komiljohn/TestTasks/osm-prosight-dev/openlayers-map-app/node_modules/ol/renderer/webgl/PointsLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport {ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER} from '../../webgl.js';\nimport {AttributeType, DefaultUniform} from '../../webgl/Helper.js';\nimport {WebGLWorkerMessageType} from '../../render/webgl/constants.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n  multiply as multiplyTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {assert} from '../../asserts.js';\nimport {buffer, createEmpty, equals} from '../../extent.js';\nimport {colorDecodeId, colorEncodeId} from '../../render/webgl/utils.js';\nimport {create as createWebGLWorker} from '../../worker/webgl.js';\nimport {fromUserCoordinate, getUserProjection} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {getWorldParameters} from './worldUtil.js';\nimport {listen, unlistenByKey} from '../../events.js';\n\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {boolean} [hitDetectionEnabled] Whether shader is hit detection aware.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = options.uniforms || {};\n    const projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    /**\n     * @private\n     */\n    this.sourceRevision_ = -1;\n\n    /**\n     * @private\n     */\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    /**\n     * @private\n     */\n    this.indicesBuffer_ = new WebGLArrayBuffer(\n      ELEMENT_ARRAY_BUFFER,\n      DYNAMIC_DRAW,\n    );\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = options.hitDetectionEnabled ?? true;\n\n    const customAttributes = options.attributes\n      ? options.attributes.map(function (attribute) {\n          return {\n            name: 'a_prop_' + attribute.name,\n            size: 1,\n            type: AttributeType.FLOAT,\n          };\n        })\n      : [];\n\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.attributes = [\n      {\n        name: 'a_position',\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: 'a_index',\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n    ];\n\n    if (this.hitDetectionEnabled_) {\n      this.attributes.push({\n        name: 'a_prop_hitColor',\n        size: 4,\n        type: AttributeType.FLOAT,\n      });\n      this.attributes.push({\n        name: 'a_featureUid',\n        size: 1,\n        type: AttributeType.FLOAT,\n      });\n    }\n    this.attributes.push(...customAttributes);\n\n    this.customAttributes = options.attributes ? options.attributes : [];\n\n    /**\n     * @private\n     */\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = projectionMatrixTransform;\n\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.renderTransform_ = createTransform();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.invertRenderTransform_ = createTransform();\n\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n    this.renderInstructions_ = new Float32Array(0);\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n    this.lastSentId = 0;\n\n    /**\n     * @private\n     */\n    this.worker_ = createWebGLWorker();\n\n    this.worker_.addEventListener(\n      'message',\n      /**\n       * @param {*} event Event.\n       */\n      (event) => {\n        const received = event.data;\n        if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n          const projectionTransform = received.projectionTransform;\n          this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n          this.helper.flushBufferData(this.verticesBuffer_);\n          this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n          this.helper.flushBufferData(this.indicesBuffer_);\n\n          this.renderTransform_ = projectionTransform;\n          makeInverseTransform(\n            this.invertRenderTransform_,\n            this.renderTransform_,\n          );\n          this.renderInstructions_ = new Float32Array(\n            event.data.renderInstructions,\n          );\n          if (received.id === this.lastSentId) {\n            this.ready = true;\n          }\n          this.getLayer().changed();\n        }\n      },\n    );\n\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n    this.featureCache_ = {};\n\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n    this.featureCount_ = 0;\n\n    const source = this.getLayer().getSource();\n    /**\n     * @private\n     */\n    this.sourceListenKeys_ = [\n      listen(\n        source,\n        VectorEventType.ADDFEATURE,\n        this.handleSourceFeatureAdded_,\n        this,\n      ),\n      listen(\n        source,\n        VectorEventType.CHANGEFEATURE,\n        this.handleSourceFeatureChanged_,\n        this,\n      ),\n      listen(\n        source,\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceFeatureDelete_,\n        this,\n      ),\n      listen(\n        source,\n        VectorEventType.CLEAR,\n        this.handleSourceFeatureClear_,\n        this,\n      ),\n    ];\n    source.forEachFeature((feature) => {\n      this.featureCache_[getUid(feature)] = {\n        feature: feature,\n        properties: feature.getProperties(),\n        geometry: feature.getGeometry(),\n      };\n      this.featureCount_++;\n    });\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    this.program_ = this.helper.getProgram(\n      this.fragmentShader_,\n      this.vertexShader_,\n    );\n\n    if (this.hitDetectionEnabled_) {\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n\n    // upload buffers again if any\n    if (this.verticesBuffer_.getArray()) {\n      this.helper.flushBufferData(this.verticesBuffer_);\n    }\n    if (this.indicesBuffer_.getArray()) {\n      this.helper.flushBufferData(this.indicesBuffer_);\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry(),\n    };\n    this.featureCount_++;\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry(),\n    };\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    delete this.featureCache_[getUid(feature)];\n    this.featureCount_--;\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(\n      frameState,\n      this.getLayer(),\n    );\n\n    // draw the normal canvas\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\n    this.helper.finalizeDraw(\n      frameState,\n      this.dispatchPreComposeEvent,\n      this.dispatchPostComposeEvent,\n    );\n\n    if (this.hitDetectionEnabled_) {\n      // draw the hit buffer\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n\n    this.postRender(gl, frameState);\n\n    const canvas = this.helper.getCanvas();\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving =\n      !frameState.viewHints[ViewHint.ANIMATING] &&\n      !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n\n      const renderBuffer =\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    }\n\n    this.helper.useProgram(this.program_, frameState);\n    this.helper.prepareDraw(frameState);\n\n    // write new data\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n\n    return true;\n  }\n\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  rebuildBuffers_(frameState) {\n    // saves the projection transform for the current frame state\n    const projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\n\n    const userProjection = getUserProjection();\n\n    const baseInstructionLength = this.hitDetectionEnabled_ ? 7 : 2; // see below\n    const singleInstructionLength =\n      baseInstructionLength + this.customAttributes.length;\n    const totalSize = singleInstructionLength * this.featureCount_;\n    if (\n      !this.renderInstructions_ ||\n      this.renderInstructions_.length !== totalSize\n    ) {\n      this.renderInstructions_ = new Float32Array(totalSize);\n    }\n\n    // loop on features to fill the buffer\n    let featureCache, geometry;\n    const tmpCoords = [];\n    const tmpColor = [];\n    let idx = -1;\n    for (const featureUid in this.featureCache_) {\n      featureCache = this.featureCache_[featureUid];\n      geometry = /** @type {import(\"../../geom\").Point} */ (\n        featureCache.geometry\n      );\n      if (!geometry || geometry.getType() !== 'Point') {\n        continue;\n      }\n      if (userProjection) {\n        const userCoords = fromUserCoordinate(\n          geometry.getFlatCoordinates(),\n          frameState.viewState.projection,\n        );\n        tmpCoords[0] = userCoords[0];\n        tmpCoords[1] = userCoords[1];\n      } else {\n        tmpCoords[0] = geometry.getFlatCoordinates()[0];\n        tmpCoords[1] = geometry.getFlatCoordinates()[1];\n      }\n      applyTransform(projectionTransform, tmpCoords);\n\n      this.renderInstructions_[++idx] = tmpCoords[0];\n      this.renderInstructions_[++idx] = tmpCoords[1];\n\n      // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n      if (this.hitDetectionEnabled_) {\n        const hitColor = colorEncodeId(idx + 5, tmpColor);\n        this.renderInstructions_[++idx] = hitColor[0];\n        this.renderInstructions_[++idx] = hitColor[1];\n        this.renderInstructions_[++idx] = hitColor[2];\n        this.renderInstructions_[++idx] = hitColor[3];\n        this.renderInstructions_[++idx] = Number(featureUid);\n      }\n\n      // pushing custom attributes\n      for (let j = 0; j < this.customAttributes.length; j++) {\n        const value = this.customAttributes[j].callback(\n          featureCache.feature,\n          featureCache.properties,\n        );\n        this.renderInstructions_[++idx] = value;\n      }\n    }\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: ++this.lastSentId,\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n      renderInstructions: this.renderInstructions_.buffer,\n      customAttributesSize: singleInstructionLength - 2,\n    };\n    // additional properties will be sent back as-is by the worker\n    message['projectionTransform'] = projectionTransform;\n    this.ready = false;\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n    this.renderInstructions_ = null;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    assert(\n      this.hitDetectionEnabled_,\n      '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.',\n    );\n    if (!this.renderInstructions_ || !this.hitDetectionEnabled_) {\n      return undefined;\n    }\n\n    const pixel = applyTransform(\n      frameState.coordinateToPixelTransform,\n      coordinate.slice(),\n    );\n\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const index = colorDecodeId(color);\n    const opacity = this.renderInstructions_[index];\n    const uid = Math.floor(opacity).toString();\n\n    const source = this.getLayer().getSource();\n    const feature = source.getFeatureByUid(uid);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Render the world, either to the main framebuffer or to the hit framebuffer\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\n    let world = startWorld;\n\n    this.helper.useProgram(this.program_, frameState);\n\n    if (forHitDetection) {\n      this.hitRenderTarget_.setSize([\n        Math.floor(frameState.size[0] / 2),\n        Math.floor(frameState.size[1] / 2),\n      ]);\n      this.helper.prepareDrawToRenderTarget(\n        frameState,\n        this.hitRenderTarget_,\n        true,\n      );\n    }\n\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n      this.helper.applyHitDetectionUniform(forHitDetection);\n      const renderCount = this.indicesBuffer_.getSize();\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.worker_.terminate();\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n    super.disposeInternal();\n  }\n\n  renderDeclutter() {}\n}\n\nexport default WebGLPointsLayerRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}