{"ast":null,"code":"/**\n * @module ol/source/VectorTile\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../VectorTile.js';\nimport TileCache from '../TileCache.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport VectorRenderTile from '../VectorRenderTile.js';\nimport { DEFAULT_MAX_ZOOM } from '../tilegrid/common.js';\nimport { buffer as bufferExtent, getIntersection, intersects } from '../extent.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getCacheKeyForTileKey } from '../tilecoord.js';\nimport { isEmpty } from '../obj.js';\nimport { loadFeaturesXhr } from '../featureloader.js';\nimport { toSize } from '../size.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {import(\"../format/Feature.js\").default<FeatureType>} [format] Feature format for tiles. Used and required by the default.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\n * ```js\n * function(tile, url) {\n *   tile.setLoader(function(extent, resolution, projection) {\n *     fetch(url).then(function(response) {\n *       response.arrayBuffer().then(function(data) {\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\n *         const features = format.readFeatures(data, {\n *           extent: extent,\n *           featureProjection: projection\n *         });\n *         tile.setFeatures(features);\n *       });\n *     });\n *   });\n * }\n * ```\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\n * to call `setFeatures()` on the tile:\n * ```js\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\n * async function tileLoadFunction(tile, url) {\n *   const response = await fetch(url);\n *   const data = await response.json();\n *   tile.setFeatures(format.readFeatures(data));\n * }\n * ```\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Class for layer sources providing vector data divided into a tile grid, to be\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\n * with vector features from the server, it is not meant for feature editing.\n * Features are optimized for rendering, their geometries are clipped at or near\n * tile boundaries and simplified for a view resolution. See\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\n * editing.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n */\nclass VectorTile extends UrlTile {\n  /**\n   * @param {!Options<FeatureType>} options Vector tile options.\n   */\n  constructor(options) {\n    const projection = options.projection || 'EPSG:3857';\n    const extent = options.extent || extentFromProjection(projection);\n    const tileGrid = options.tileGrid || createXYZ({\n      extent: extent,\n      maxResolution: options.maxResolution,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize || 512\n    });\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      interpolate: true,\n      projection: projection,\n      state: options.state,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultLoadFunction,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\n      transition: options.transition,\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default<FeatureType>|null}\n     */\n    this.format_ = options.format ? options.format : null;\n\n    /**\n     * @private\n     * @type {TileCache}\n     */\n    this.sourceTileCache_ = new TileCache(128);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @protected\n     * @type {typeof import(\"../VectorTile.js\").default}\n     */\n    this.tileClass = options.tileClass ? options.tileClass : Tile;\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGrids_ = {};\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * clear {@link module:ol/TileCache~TileCache} and delete all source tiles\n   * @api\n   * @override\n   */\n  clear() {\n    this.sourceTileCache_.clear();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   * @override\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    const usedSourceTiles = Object.keys(usedTiles).reduce((acc, key) => {\n      const cacheKey = getCacheKeyForTileKey(key);\n      const tile = tileCache.peek(cacheKey);\n      if (tile) {\n        const sourceTiles = tile.sourceTiles;\n        for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n          acc[sourceTiles[i].getKey()] = true;\n        }\n      }\n      return acc;\n    }, {});\n    super.expireCache(projection, usedTiles);\n    this.sourceTileCache_.expireCache(usedSourceTiles);\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection\").default} projection Projection.\n   * @param {VectorRenderTile} tile Vector image tile.\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\n   */\n  getSourceTiles(pixelRatio, projection, tile) {\n    if (tile.getState() === TileState.IDLE) {\n      tile.setState(TileState.LOADING);\n      const urlTileCoord = tile.wrappedTileCoord;\n      const tileGrid = this.getTileGridForProjection(projection);\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      const z = urlTileCoord[0];\n      const resolution = tileGrid.getResolution(z);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(extent, -resolution, extent);\n      const sourceTileGrid = this.tileGrid;\n      const sourceExtent = sourceTileGrid.getExtent();\n      if (sourceExtent) {\n        getIntersection(extent, sourceExtent, extent);\n      }\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, this.zDirection);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, sourceTileCoord => {\n        const tileUrl = this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n        const sourceTile = this.sourceTileCache_.containsKey(tileUrl) ? this.sourceTileCache_.get(tileUrl) : new this.tileClass(sourceTileCoord, tileUrl ? TileState.IDLE : TileState.EMPTY, tileUrl, this.format_, this.tileLoadFunction);\n        tile.sourceTiles.push(sourceTile);\n        const sourceTileState = sourceTile.getState();\n        if (sourceTileState < TileState.LOADED) {\n          const listenChange = event => {\n            this.handleTileChange(event);\n            const state = sourceTile.getState();\n            if (state === TileState.LOADED || state === TileState.ERROR) {\n              const sourceTileKey = sourceTile.getKey();\n              if (sourceTileKey in tile.errorTileKeys) {\n                if (sourceTile.getState() === TileState.LOADED) {\n                  delete tile.errorTileKeys[sourceTileKey];\n                }\n              } else {\n                tile.loadingSourceTiles--;\n              }\n              if (state === TileState.ERROR) {\n                tile.errorTileKeys[sourceTileKey] = true;\n              } else {\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange);\n              }\n              if (tile.loadingSourceTiles === 0) {\n                tile.setState(isEmpty(tile.errorTileKeys) ? TileState.LOADED : TileState.ERROR);\n              }\n            }\n          };\n          sourceTile.addEventListener(EventType.CHANGE, listenChange);\n          tile.loadingSourceTiles++;\n        }\n        if (sourceTileState === TileState.IDLE) {\n          sourceTile.extent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n          sourceTile.projection = projection;\n          sourceTile.resolution = sourceTileGrid.getResolution(sourceTileCoord[0]);\n          this.sourceTileCache_.set(tileUrl, sourceTile);\n          sourceTile.load();\n        }\n      });\n      if (!tile.loadingSourceTiles) {\n        tile.setState(tile.sourceTiles.some(sourceTile => sourceTile.getState() === TileState.ERROR) ? TileState.ERROR : TileState.LOADED);\n      }\n    }\n    return tile.sourceTiles;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!VectorRenderTile} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoord = [z, x, y];\n    let urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const sourceExtent = this.getTileGrid().getExtent();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (urlTileCoord && sourceExtent) {\n      const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\n      if (!intersects(sourceExtent, tileExtent)) {\n        urlTileCoord = null;\n      }\n    }\n    let empty = true;\n    if (urlTileCoord !== null) {\n      const sourceTileGrid = this.tileGrid;\n      const resolution = tileGrid.getResolution(z);\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      bufferExtent(extent, -resolution, extent);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, sourceTileCoord => {\n        empty = empty && !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n      });\n    }\n    const newTile = new VectorRenderTile(tileCoord, empty ? TileState.EMPTY : TileState.IDLE, urlTileCoord, this.getSourceTiles.bind(this, pixelRatio, projection));\n    newTile.key = this.getKey();\n    return newTile;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const code = projection.getCode();\n    let tileGrid = this.tileGrids_[code];\n    if (!tileGrid) {\n      // A tile grid that matches the tile size of the source tile grid is more\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\n      const sourceTileGrid = this.tileGrid;\n      const resolutions = sourceTileGrid.getResolutions().slice();\n      const origins = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getOrigin(z);\n      });\n      const tileSizes = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getTileSize(z);\n      });\n      const length = DEFAULT_MAX_ZOOM + 1;\n      for (let z = resolutions.length; z < length; ++z) {\n        resolutions.push(resolutions[z - 1] / 2);\n        origins.push(origins[z - 1]);\n        tileSizes.push(tileSizes[z - 1]);\n      }\n      tileGrid = new TileGrid({\n        extent: sourceTileGrid.getExtent(),\n        origins: origins,\n        resolutions: resolutions,\n        tileSizes: tileSizes\n      });\n      this.tileGrids_[code] = tileGrid;\n    }\n    return tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   * @override\n   */\n  getTilePixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   * @override\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];\n  }\n}\nexport default VectorTile;\n\n/**\n * Sets the loader for a tile.\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @param {import(\"../VectorTile.js\").default<FeatureType>} tile Vector tile.\n * @param {string} url URL.\n */\nexport function defaultLoadFunction(tile, url) {\n  tile.setLoader(\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  function (extent, resolution, projection) {\n    loadFeaturesXhr(url, tile.getFormat(), extent, resolution, projection, tile.onLoad.bind(tile), tile.onError.bind(tile));\n  });\n}","map":{"version":3,"names":["EventType","Tile","TileCache","TileGrid","TileState","UrlTile","VectorRenderTile","DEFAULT_MAX_ZOOM","buffer","bufferExtent","getIntersection","intersects","createXYZ","extentFromProjection","getCacheKeyForTileKey","isEmpty","loadFeaturesXhr","toSize","VectorTile","constructor","options","projection","extent","tileGrid","maxResolution","maxZoom","undefined","minZoom","tileSize","attributions","attributionsCollapsible","cacheSize","interpolate","state","tileLoadFunction","defaultLoadFunction","tileUrlFunction","url","urls","wrapX","transition","zDirection","format_","format","sourceTileCache_","overlaps_","overlaps","tileClass","tileGrids_","getOverlaps","clear","expireCache","usedTiles","tileCache","getTileCacheForProjection","usedSourceTiles","Object","keys","reduce","acc","key","cacheKey","tile","peek","sourceTiles","i","ii","length","getKey","getSourceTiles","pixelRatio","getState","IDLE","setState","LOADING","urlTileCoord","wrappedTileCoord","getTileGridForProjection","getTileCoordExtent","z","resolution","getResolution","sourceTileGrid","sourceExtent","getExtent","sourceZ","getZForResolution","forEachTileCoord","sourceTileCoord","tileUrl","sourceTile","containsKey","get","EMPTY","push","sourceTileState","LOADED","listenChange","event","handleTileChange","ERROR","sourceTileKey","errorTileKeys","loadingSourceTiles","removeEventListener","CHANGE","addEventListener","set","load","some","getTile","x","y","tileCoord","getTileCoordForTileUrlFunction","getTileGrid","tileExtent","empty","newTile","bind","code","getCode","resolutions","getResolutions","slice","origins","map","getOrigin","tileSizes","getTileSize","getTilePixelRatio","getTilePixelSize","tmpSize","Math","round","setLoader","getFormat","onLoad","onError"],"sources":["/Users/komiljohn/TestTasks/osm-prosight-dev/openlayers-map-app/node_modules/ol/source/VectorTile.js"],"sourcesContent":["/**\n * @module ol/source/VectorTile\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../VectorTile.js';\nimport TileCache from '../TileCache.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport VectorRenderTile from '../VectorRenderTile.js';\nimport {DEFAULT_MAX_ZOOM} from '../tilegrid/common.js';\nimport {\n  buffer as bufferExtent,\n  getIntersection,\n  intersects,\n} from '../extent.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getCacheKeyForTileKey} from '../tilecoord.js';\nimport {isEmpty} from '../obj.js';\nimport {loadFeaturesXhr} from '../featureloader.js';\nimport {toSize} from '../size.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {import(\"../format/Feature.js\").default<FeatureType>} [format] Feature format for tiles. Used and required by the default.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\n * ```js\n * function(tile, url) {\n *   tile.setLoader(function(extent, resolution, projection) {\n *     fetch(url).then(function(response) {\n *       response.arrayBuffer().then(function(data) {\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\n *         const features = format.readFeatures(data, {\n *           extent: extent,\n *           featureProjection: projection\n *         });\n *         tile.setFeatures(features);\n *       });\n *     });\n *   });\n * }\n * ```\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\n * to call `setFeatures()` on the tile:\n * ```js\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\n * async function tileLoadFunction(tile, url) {\n *   const response = await fetch(url);\n *   const data = await response.json();\n *   tile.setFeatures(format.readFeatures(data));\n * }\n * ```\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Class for layer sources providing vector data divided into a tile grid, to be\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\n * with vector features from the server, it is not meant for feature editing.\n * Features are optimized for rendering, their geometries are clipped at or near\n * tile boundaries and simplified for a view resolution. See\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\n * editing.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n */\nclass VectorTile extends UrlTile {\n  /**\n   * @param {!Options<FeatureType>} options Vector tile options.\n   */\n  constructor(options) {\n    const projection = options.projection || 'EPSG:3857';\n\n    const extent = options.extent || extentFromProjection(projection);\n\n    const tileGrid =\n      options.tileGrid ||\n      createXYZ({\n        extent: extent,\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize || 512,\n      });\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      interpolate: true,\n      projection: projection,\n      state: options.state,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultLoadFunction,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\n      transition: options.transition,\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default<FeatureType>|null}\n     */\n    this.format_ = options.format ? options.format : null;\n\n    /**\n     * @private\n     * @type {TileCache}\n     */\n    this.sourceTileCache_ = new TileCache(128);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @protected\n     * @type {typeof import(\"../VectorTile.js\").default}\n     */\n    this.tileClass = options.tileClass ? options.tileClass : Tile;\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGrids_ = {};\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * clear {@link module:ol/TileCache~TileCache} and delete all source tiles\n   * @api\n   * @override\n   */\n  clear() {\n    this.sourceTileCache_.clear();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   * @override\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    const usedSourceTiles = Object.keys(usedTiles).reduce((acc, key) => {\n      const cacheKey = getCacheKeyForTileKey(key);\n      const tile = tileCache.peek(cacheKey);\n      if (tile) {\n        const sourceTiles = tile.sourceTiles;\n        for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n          acc[sourceTiles[i].getKey()] = true;\n        }\n      }\n      return acc;\n    }, {});\n    super.expireCache(projection, usedTiles);\n    this.sourceTileCache_.expireCache(usedSourceTiles);\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection\").default} projection Projection.\n   * @param {VectorRenderTile} tile Vector image tile.\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\n   */\n  getSourceTiles(pixelRatio, projection, tile) {\n    if (tile.getState() === TileState.IDLE) {\n      tile.setState(TileState.LOADING);\n      const urlTileCoord = tile.wrappedTileCoord;\n      const tileGrid = this.getTileGridForProjection(projection);\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      const z = urlTileCoord[0];\n      const resolution = tileGrid.getResolution(z);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(extent, -resolution, extent);\n      const sourceTileGrid = this.tileGrid;\n      const sourceExtent = sourceTileGrid.getExtent();\n      if (sourceExtent) {\n        getIntersection(extent, sourceExtent, extent);\n      }\n      const sourceZ = sourceTileGrid.getZForResolution(\n        resolution,\n        this.zDirection,\n      );\n\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\n        const tileUrl = this.tileUrlFunction(\n          sourceTileCoord,\n          pixelRatio,\n          projection,\n        );\n        const sourceTile = this.sourceTileCache_.containsKey(tileUrl)\n          ? this.sourceTileCache_.get(tileUrl)\n          : new this.tileClass(\n              sourceTileCoord,\n              tileUrl ? TileState.IDLE : TileState.EMPTY,\n              tileUrl,\n              this.format_,\n              this.tileLoadFunction,\n            );\n        tile.sourceTiles.push(sourceTile);\n        const sourceTileState = sourceTile.getState();\n        if (sourceTileState < TileState.LOADED) {\n          const listenChange = (event) => {\n            this.handleTileChange(event);\n            const state = sourceTile.getState();\n            if (state === TileState.LOADED || state === TileState.ERROR) {\n              const sourceTileKey = sourceTile.getKey();\n              if (sourceTileKey in tile.errorTileKeys) {\n                if (sourceTile.getState() === TileState.LOADED) {\n                  delete tile.errorTileKeys[sourceTileKey];\n                }\n              } else {\n                tile.loadingSourceTiles--;\n              }\n              if (state === TileState.ERROR) {\n                tile.errorTileKeys[sourceTileKey] = true;\n              } else {\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange);\n              }\n              if (tile.loadingSourceTiles === 0) {\n                tile.setState(\n                  isEmpty(tile.errorTileKeys)\n                    ? TileState.LOADED\n                    : TileState.ERROR,\n                );\n              }\n            }\n          };\n          sourceTile.addEventListener(EventType.CHANGE, listenChange);\n          tile.loadingSourceTiles++;\n        }\n        if (sourceTileState === TileState.IDLE) {\n          sourceTile.extent =\n            sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n          sourceTile.projection = projection;\n          sourceTile.resolution = sourceTileGrid.getResolution(\n            sourceTileCoord[0],\n          );\n          this.sourceTileCache_.set(tileUrl, sourceTile);\n          sourceTile.load();\n        }\n      });\n      if (!tile.loadingSourceTiles) {\n        tile.setState(\n          tile.sourceTiles.some(\n            (sourceTile) => sourceTile.getState() === TileState.ERROR,\n          )\n            ? TileState.ERROR\n            : TileState.LOADED,\n        );\n      }\n    }\n\n    return tile.sourceTiles;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!VectorRenderTile} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoord = [z, x, y];\n    let urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const sourceExtent = this.getTileGrid().getExtent();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (urlTileCoord && sourceExtent) {\n      const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\n      if (!intersects(sourceExtent, tileExtent)) {\n        urlTileCoord = null;\n      }\n    }\n    let empty = true;\n    if (urlTileCoord !== null) {\n      const sourceTileGrid = this.tileGrid;\n      const resolution = tileGrid.getResolution(z);\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      bufferExtent(extent, -resolution, extent);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\n        empty =\n          empty &&\n          !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n      });\n    }\n    const newTile = new VectorRenderTile(\n      tileCoord,\n      empty ? TileState.EMPTY : TileState.IDLE,\n      urlTileCoord,\n      this.getSourceTiles.bind(this, pixelRatio, projection),\n    );\n    newTile.key = this.getKey();\n    return newTile;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const code = projection.getCode();\n    let tileGrid = this.tileGrids_[code];\n    if (!tileGrid) {\n      // A tile grid that matches the tile size of the source tile grid is more\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\n      const sourceTileGrid = this.tileGrid;\n      const resolutions = sourceTileGrid.getResolutions().slice();\n      const origins = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getOrigin(z);\n      });\n      const tileSizes = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getTileSize(z);\n      });\n      const length = DEFAULT_MAX_ZOOM + 1;\n      for (let z = resolutions.length; z < length; ++z) {\n        resolutions.push(resolutions[z - 1] / 2);\n        origins.push(origins[z - 1]);\n        tileSizes.push(tileSizes[z - 1]);\n      }\n      tileGrid = new TileGrid({\n        extent: sourceTileGrid.getExtent(),\n        origins: origins,\n        resolutions: resolutions,\n        tileSizes: tileSizes,\n      });\n      this.tileGrids_[code] = tileGrid;\n    }\n    return tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   * @override\n   */\n  getTilePixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   * @override\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    return [\n      Math.round(tileSize[0] * pixelRatio),\n      Math.round(tileSize[1] * pixelRatio),\n    ];\n  }\n}\n\nexport default VectorTile;\n\n/**\n * Sets the loader for a tile.\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../render/Feature.js\").default]\n * @param {import(\"../VectorTile.js\").default<FeatureType>} tile Vector tile.\n * @param {string} url URL.\n */\nexport function defaultLoadFunction(tile, url) {\n  tile.setLoader(\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    function (extent, resolution, projection) {\n      loadFeaturesXhr(\n        url,\n        tile.getFormat(),\n        extent,\n        resolution,\n        projection,\n        tile.onLoad.bind(tile),\n        tile.onError.bind(tile),\n      );\n    },\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}