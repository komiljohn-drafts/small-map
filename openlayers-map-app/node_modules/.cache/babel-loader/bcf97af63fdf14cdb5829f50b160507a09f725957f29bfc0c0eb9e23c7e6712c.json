{"ast":null,"code":"/**\n * Rearranges items so that all items in the [left, k] are the smallest.\n * The k-th element will have the (k - left + 1)-th smallest value in [left, right].\n *\n * @template T\n * @param {T[]} arr the array to partially sort (in place)\n * @param {number} k middle index for partial sorting (as defined above)\n * @param {number} [left=0] left index of the range to sort\n * @param {number} [right=arr.length-1] right index\n * @param {(a: T, b: T) => number} [compare = (a, b) => a - b] compare function\n */\nexport default function quickselect(arr, k, left = 0, right = arr.length - 1, compare = defaultCompare) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(arr, k, newLeft, newRight, compare);\n    }\n    const t = arr[k];\n    let i = left;\n    /** @type {number} */\n    let j = right;\n    swap(arr, left, k);\n    if (compare(arr[right], t) > 0) swap(arr, left, right);\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n      while (compare(arr[i], t) < 0) i++;\n      while (compare(arr[j], t) > 0) j--;\n    }\n    if (compare(arr[left], t) === 0) swap(arr, left, j);else {\n      j++;\n      swap(arr, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\n\n/**\n * @template T\n * @param {T[]} arr\n * @param {number} i\n * @param {number} j\n */\nfunction swap(arr, i, j) {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\n/**\n * @template T\n * @param {T} a\n * @param {T} b\n * @returns {number}\n */\nfunction defaultCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}","map":{"version":3,"names":["quickselect","arr","k","left","right","length","compare","defaultCompare","n","m","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","i","j","swap","tmp","a","b"],"sources":["/Users/komiljohn/TestTasks/osm-prosight-dev/openlayers-map-app/node_modules/quickselect/index.js"],"sourcesContent":["\n/**\n * Rearranges items so that all items in the [left, k] are the smallest.\n * The k-th element will have the (k - left + 1)-th smallest value in [left, right].\n *\n * @template T\n * @param {T[]} arr the array to partially sort (in place)\n * @param {number} k middle index for partial sorting (as defined above)\n * @param {number} [left=0] left index of the range to sort\n * @param {number} [right=arr.length-1] right index\n * @param {(a: T, b: T) => number} [compare = (a, b) => a - b] compare function\n */\nexport default function quickselect(arr, k, left = 0, right = arr.length - 1, compare = defaultCompare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselect(arr, k, newLeft, newRight, compare);\n        }\n\n        const t = arr[k];\n        let i = left;\n        /** @type {number} */\n        let j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\n/**\n * @template T\n * @param {T[]} arr\n * @param {number} i\n * @param {number} j\n */\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n/**\n * @template T\n * @param {T} a\n * @param {T} b\n * @returns {number}\n */\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}