{"ast":null,"code":"/**\n * @module ol/source/mapguide\n */\n\nimport { appendParams } from '../uri.js';\nimport { decode } from '../Image.js';\nimport { getCenter, getHeight, getWidth } from '../extent.js';\nimport { getRequestExtent } from './Image.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {string} url The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Object} [params] Additional query parameters.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  }\n  return mcsH * metersPerUnit / (devH * mpp); // height limited\n}\n\n/**\n * @param {string} baseUrl The mapagent url.\n * @param {Object<string, string|number>} params Request parameters.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {boolean} useOverlay If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} displayDpi The display resolution.\n * @return {string} The mapagent map image request URL.\n */\nfunction getUrl(baseUrl, params, extent, size, useOverlay, metersPerUnit, displayDpi) {\n  const scale = getScale(extent, size, metersPerUnit, displayDpi);\n  const center = getCenter(extent);\n  const baseParams = {\n    'OPERATION': useOverlay ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n    'VERSION': '2.0.0',\n    'LOCALE': 'en',\n    'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n    'CLIP': '1',\n    'SETDISPLAYDPI': displayDpi,\n    'SETDISPLAYWIDTH': Math.round(size[0]),\n    'SETDISPLAYHEIGHT': Math.round(size[1]),\n    'SETVIEWSCALE': scale,\n    'SETVIEWCENTERX': center[0],\n    'SETVIEWCENTERY': center[1]\n  };\n  Object.assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n}\n\n/**\n * Creates a loader for MapGuide images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const useOverlay = options.useOverlay ?? false;\n  const metersPerUnit = options.metersPerUnit || 1;\n  const displayDpi = options.displayDpi || 96;\n  const ratio = options.ratio ?? 1;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const src = getUrl(options.url, options.params, extent, size, useOverlay, metersPerUnit, displayDpi);\n    return load(image, src).then(image => ({\n      image,\n      extent,\n      pixelRatio\n    }));\n  };\n}","map":{"version":3,"names":["appendParams","decode","getCenter","getHeight","getWidth","getRequestExtent","getScale","extent","size","metersPerUnit","dpi","mcsW","mcsH","devW","devH","mpp","getUrl","baseUrl","params","useOverlay","displayDpi","scale","center","baseParams","Math","round","Object","assign","createLoader","options","load","ratio","crossOrigin","resolution","pixelRatio","image","Image","width","height","src","url","then"],"sources":["/Users/komiljohn/TestTasks/osm-prosight-dev/openlayers-map-app/node_modules/ol/source/mapguide.js"],"sourcesContent":["/**\n * @module ol/source/mapguide\n */\n\nimport {appendParams} from '../uri.js';\nimport {decode} from '../Image.js';\nimport {getCenter, getHeight, getWidth} from '../extent.js';\nimport {getRequestExtent} from './Image.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {string} url The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Object} [params] Additional query parameters.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\n  }\n  return (mcsH * metersPerUnit) / (devH * mpp); // height limited\n}\n\n/**\n * @param {string} baseUrl The mapagent url.\n * @param {Object<string, string|number>} params Request parameters.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {boolean} useOverlay If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} displayDpi The display resolution.\n * @return {string} The mapagent map image request URL.\n */\nfunction getUrl(\n  baseUrl,\n  params,\n  extent,\n  size,\n  useOverlay,\n  metersPerUnit,\n  displayDpi,\n) {\n  const scale = getScale(extent, size, metersPerUnit, displayDpi);\n  const center = getCenter(extent);\n  const baseParams = {\n    'OPERATION': useOverlay ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n    'VERSION': '2.0.0',\n    'LOCALE': 'en',\n    'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n    'CLIP': '1',\n    'SETDISPLAYDPI': displayDpi,\n    'SETDISPLAYWIDTH': Math.round(size[0]),\n    'SETDISPLAYHEIGHT': Math.round(size[1]),\n    'SETVIEWSCALE': scale,\n    'SETVIEWCENTERX': center[0],\n    'SETVIEWCENTERY': center[1],\n  };\n  Object.assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n}\n\n/**\n * Creates a loader for MapGuide images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const useOverlay = options.useOverlay ?? false;\n  const metersPerUnit = options.metersPerUnit || 1;\n  const displayDpi = options.displayDpi || 96;\n  const ratio = options.ratio ?? 1;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const src = getUrl(\n      options.url,\n      options.params,\n      extent,\n      size,\n      useOverlay,\n      metersPerUnit,\n      displayDpi,\n    );\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}