{"ast":null,"code":"/**\n * @module ol/webgl/TileTexture\n */\n\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport DataTile, { asArrayLike, asImageLike } from '../DataTile.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(helper, texture, data, size, bandCount, interpolate) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n  let format;\n  switch (bandCount) {\n    case 1:\n      {\n        format = gl.LUMINANCE;\n        break;\n      }\n    case 2:\n      {\n        format = gl.LUMINANCE_ALPHA;\n        break;\n      }\n    case 3:\n      {\n        format = gl.RGB;\n        break;\n      }\n    case 4:\n      {\n        format = gl.RGBA;\n        break;\n      }\n    default:\n      {\n        throw new Error(`Unsupported number of bands: ${bandCount}`);\n      }\n  }\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(options.grid.getTileSize(options.tile.tileCoord[0]));\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([0,\n    // P0\n    1, 1,\n    // P1\n    1, 1,\n    // P2\n    0, 0,\n    // P3\n    0]);\n    this.helper.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @override\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    const gl = this.helper?.getGL();\n    if (gl) {\n      this.helper.deleteBuffer(this.coords);\n      for (let i = 0; i < this.textures.length; ++i) {\n        gl.deleteTexture(this.textures[i]);\n      }\n    }\n    super.setHelper(helper);\n    if (helper) {\n      helper.flushBufferData(this.coords);\n    }\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const tile = this.tile;\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n    data = asArrayLike(data);\n    const sourceTileSize = /** @type {DataTile} */tile.getSize();\n    const pixelSize = [sourceTileSize[0] + 2 * this.gutter, sourceTileSize[1] + 2 * this.gutter];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(helper, texture, data, pixelSize, this.bandCount, tile.interpolate);\n      this.setReady();\n      return;\n    }\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      const bandCount = textureIndex < textureCount - 1 ? 4 : (this.bandCount - 1) % 4 + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(helper, texture, textureData, pixelSize, bandCount, tile.interpolate);\n    }\n    this.setReady();\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n    const sourceCol = gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n    const sourceRow = gutter + Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n    const sourceCol = gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n    const sourceRow = gutter + Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(arrayData, sourceSize, renderCol, renderRow);\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\nexport default TileTexture;","map":{"version":3,"names":["BaseTileRepresentation","DataTile","asArrayLike","asImageLike","ImageTile","ReprojTile","WebGLArrayBuffer","ARRAY_BUFFER","STATIC_DRAW","createCanvasContext2D","toSize","bindAndConfigure","gl","texture","interpolate","resampleFilter","LINEAR","NEAREST","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","uploadImageTexture","image","texImage2D","RGBA","UNSIGNED_BYTE","uploadDataTexture","helper","data","size","bandCount","getGL","textureType","canInterpolate","Float32Array","FLOAT","getExtension","extension","bytesPerRow","byteLength","unpackAlignment","format","LUMINANCE","LUMINANCE_ALPHA","RGB","Error","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","pixelContext","createPixelContext","undefined","willReadFrequently","TileTexture","constructor","options","textures","renderSize_","grid","getTileSize","tile","tileCoord","NaN","coords","fromArray","flushBufferData","setTile","setHelper","deleteBuffer","i","length","deleteTexture","uploadTile","getImage","getData","createTexture","push","setReady","sourceTileSize","getSize","pixelSize","gutter","isFloat","pixelCount","DataType","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","Math","floor","textureCount","ceil","textureDataArrays","Array","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","bandIndex","textureData","textureBandIndex","getImagePixelData_","renderCol","renderRow","renderWidth","renderHeight","clearRect","sourceWidth","width","sourceHeight","height","sourceWidthWithoutGutter","sourceHeightWithoutGutter","sourceCol","sourceRow","drawImage","getImageData","err","getArrayPixelData_","sourceSize","DataView","bytesPerPixel","offset","buffer","slice","getPixelData","loaded","arrayData"],"sources":["/Users/komiljohn/TestTasks/osm-prosight-dev/openlayers-map-app/node_modules/ol/webgl/TileTexture.js"],"sourcesContent":["/**\n * @module ol/webgl/TileTexture\n */\n\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate,\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data,\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0]),\n    );\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @override\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    const gl = this.helper?.getGL();\n    if (gl) {\n      this.helper.deleteBuffer(this.coords);\n      for (let i = 0; i < this.textures.length; ++i) {\n        gl.deleteTexture(this.textures[i]);\n      }\n    }\n\n    super.setHelper(helper);\n\n    if (helper) {\n      helper.flushBufferData(this.coords);\n    }\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n\n    data = asArrayLike(data);\n\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter,\n      sourceTileSize[1] + 2 * this.gutter,\n    ];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate,\n      );\n      this.setReady();\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate,\n      );\n    }\n\n    this.setReady();\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(\n          arrayData,\n          sourceSize,\n          renderCol,\n          renderRow,\n        );\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\n\nexport default TileTexture;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}