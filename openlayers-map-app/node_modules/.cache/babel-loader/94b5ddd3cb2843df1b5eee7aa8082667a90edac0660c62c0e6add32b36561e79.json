{"ast":null,"code":"/**\n * @module ol/source/static\n */\n\nimport { decode } from '../Image.js';\nimport { getHeight, getWidth } from '../extent.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image. When using this loader with an\n * `ol/source/Image`, the same extent must be set as `extent` of the `ol/layer/Image`.\n * @property {string} url Image URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for static images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const extent = options.imageExtent;\n  const crossOrigin = options.crossOrigin ?? null;\n  return () => {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, options.url).then(image => {\n      const resolutionX = getWidth(extent) / image.width;\n      const resolutionY = getHeight(extent) / image.height;\n      const resolution = resolutionX !== resolutionY ? [resolutionX, resolutionY] : resolutionY;\n      return {\n        image,\n        extent,\n        resolution,\n        pixelRatio: 1\n      };\n    });\n  };\n}","map":{"version":3,"names":["decode","getHeight","getWidth","createLoader","options","load","extent","imageExtent","crossOrigin","image","Image","url","then","resolutionX","width","resolutionY","height","resolution","pixelRatio"],"sources":["/Users/komiljohn/TestTasks/osm-prosight-dev/openlayers-map-app/node_modules/ol/source/static.js"],"sourcesContent":["/**\n * @module ol/source/static\n */\n\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image. When using this loader with an\n * `ol/source/Image`, the same extent must be set as `extent` of the `ol/layer/Image`.\n * @property {string} url Image URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for static images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const extent = options.imageExtent;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return () => {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    return load(image, options.url).then((image) => {\n      const resolutionX = getWidth(extent) / image.width;\n      const resolutionY = getHeight(extent) / image.height;\n      const resolution =\n        resolutionX !== resolutionY ? [resolutionX, resolutionY] : resolutionY;\n      return {image, extent, resolution, pixelRatio: 1};\n    });\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,aAAa;AAClC,SAAQC,SAAS,EAAEC,QAAQ,QAAO,cAAc;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,OAAO,EAAE;EACpC,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAI,IAAIL,MAAM;EACnC,MAAMM,MAAM,GAAGF,OAAO,CAACG,WAAW;EAClC,MAAMC,WAAW,GAAGJ,OAAO,CAACI,WAAW,IAAI,IAAI;EAE/C,OAAO,MAAM;IACX,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;IACzBD,KAAK,CAACD,WAAW,GAAGA,WAAW;IAC/B,OAAOH,IAAI,CAACI,KAAK,EAAEL,OAAO,CAACO,GAAG,CAAC,CAACC,IAAI,CAAEH,KAAK,IAAK;MAC9C,MAAMI,WAAW,GAAGX,QAAQ,CAACI,MAAM,CAAC,GAAGG,KAAK,CAACK,KAAK;MAClD,MAAMC,WAAW,GAAGd,SAAS,CAACK,MAAM,CAAC,GAAGG,KAAK,CAACO,MAAM;MACpD,MAAMC,UAAU,GACdJ,WAAW,KAAKE,WAAW,GAAG,CAACF,WAAW,EAAEE,WAAW,CAAC,GAAGA,WAAW;MACxE,OAAO;QAACN,KAAK;QAAEH,MAAM;QAAEW,UAAU;QAAEC,UAAU,EAAE;MAAC,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}