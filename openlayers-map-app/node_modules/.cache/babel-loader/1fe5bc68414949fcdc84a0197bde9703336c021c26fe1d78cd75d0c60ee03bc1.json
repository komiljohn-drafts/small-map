{"ast":null,"code":"/**\n * @module ol/source/ImageTile\n */\nimport DataTileSource from './DataTile.js';\nimport { expandUrl, pickUrl, renderXYZTemplate } from '../uri.js';\n\n/**\n * Image tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns an {@link import(\"../DataTile.js\").ImageLike image} or a promise for the same.\n *\n * @typedef {function(number, number, number, import(\"./DataTile.js\").LoaderOptions):(import(\"../DataTile.js\").ImageLike|Promise<import(\"../DataTile.js\").ImageLike>)} Loader\n */\n\n/**\n * @typedef {function(number, number, number, import(\"./DataTile.js\").LoaderOptions):string} UrlGetter\n */\n\n/**\n * @typedef {string | Array<string> | UrlGetter} UrlLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {UrlLike} [url] The image URL template.  In addition to a single URL template, an array of URL templates or a function\n * can be provided.  If a function is provided, it will be called with z, x, y tile coordinates and loader options and should\n * return a URL.\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns an {@link import(\"../DataTile.js\").ImageLike image} for a tile or a promise for the same.\n * The promise should not resolve until the image is loaded.  If the `url` option is provided, a loader will be created.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=true] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.\n * @property {import('./DataTile.js').CrossOriginAttribute} [crossOrigin='anonymous'] The crossOrigin property to pass to loaders for image data.\n */\n\nconst loadError = new Error('Image failed to load');\n\n/**\n * @param {string} template The image url template.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {import('./DataTile.js').LoaderOptions} options The loader options.\n * @return {Promise<HTMLImageElement>} Resolves with a loaded image.\n */\nfunction loadImage(template, z, x, y, options) {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.crossOrigin = options.crossOrigin ?? null;\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', () => reject(loadError));\n    image.src = renderXYZTemplate(template, z, x, y, options.maxY);\n  });\n}\n\n/**\n * @param {Array<string>} templates The url templates.\n * @return {Loader} The image loader.\n */\nfunction makeLoaderFromTemplates(templates) {\n  return function (z, x, y, options) {\n    const template = pickUrl(templates, z, x, y);\n    return loadImage(template, z, x, y, options);\n  };\n}\n\n/**\n * @param {UrlGetter} getter The url getter.\n * @return {Loader} The image loader.\n */\nfunction makeLoaderFromGetter(getter) {\n  return function (z, x, y, options) {\n    const url = getter(z, x, y, options);\n    return loadImage(url, z, x, y, options);\n  };\n}\n\n/**\n * @param {UrlLike} url The URL-like option.\n * @return {Loader} The tile loader.\n */\nfunction makeLoaderFromUrlLike(url) {\n  /**\n   * @type {Loader}\n   */\n  let loader;\n  if (Array.isArray(url)) {\n    loader = makeLoaderFromTemplates(url);\n  } else if (typeof url === 'string') {\n    const urls = expandUrl(url);\n    loader = makeLoaderFromTemplates(urls);\n  } else if (typeof url === 'function') {\n    loader = makeLoaderFromGetter(url);\n  } else {\n    throw new Error('The url option must be a single template, an array of templates, or a function for getting a URL');\n  }\n  return loader;\n}\nlet keyCount = 0;\n\n/**\n * @param {UrlLike} url The URL-like option.\n * @return {string} A key for the URL.\n */\nfunction keyFromUrlLike(url) {\n  if (Array.isArray(url)) {\n    return url.join('\\n');\n  }\n  if (typeof url === 'string') {\n    return url;\n  }\n  ++keyCount;\n  return 'url-function-key-' + keyCount;\n}\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @extends DataTileSource<import(\"../ImageTile.js\").default>\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass ImageTileSource extends DataTileSource {\n  /**\n   * @param {Options} [options] DataTile source options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {Loader}\n     */\n    let loader = options.loader;\n\n    /**\n     * @type {string}\n     */\n    let key;\n    if (options.url) {\n      loader = makeLoaderFromUrlLike(options.url);\n      key = keyFromUrlLike(options.url);\n    }\n\n    /**\n     * @type {import('./Source.js').State}\n     */\n    const state = !loader ? 'loading' : options.state;\n    const wrapX = options.wrapX === undefined ? true : options.wrapX;\n    super({\n      loader: loader,\n      key: key,\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize,\n      gutter: options.gutter,\n      maxResolution: options.maxResolution,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      state: state,\n      wrapX: wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== false,\n      crossOrigin: options.crossOrigin\n    });\n  }\n\n  /**\n   * @param {UrlLike} url The new URL.\n   * @api\n   */\n  setUrl(url) {\n    const loader = makeLoaderFromUrlLike(url);\n    this.setLoader(loader);\n    this.setKey(keyFromUrlLike(url));\n    if (this.getState() !== 'ready') {\n      this.setState('ready');\n    }\n  }\n}\nexport default ImageTileSource;","map":{"version":3,"names":["DataTileSource","expandUrl","pickUrl","renderXYZTemplate","loadError","Error","loadImage","template","z","x","y","options","Promise","resolve","reject","image","Image","crossOrigin","addEventListener","src","maxY","makeLoaderFromTemplates","templates","makeLoaderFromGetter","getter","url","makeLoaderFromUrlLike","loader","Array","isArray","urls","keyCount","keyFromUrlLike","join","ImageTileSource","constructor","key","state","wrapX","undefined","attributions","attributionsCollapsible","maxZoom","minZoom","tileSize","gutter","maxResolution","projection","tileGrid","transition","interpolate","setUrl","setLoader","setKey","getState","setState"],"sources":["/Users/komiljohn/TestTasks/osm-prosight-dev/openlayers-map-app/node_modules/ol/source/ImageTile.js"],"sourcesContent":["/**\n * @module ol/source/ImageTile\n */\nimport DataTileSource from './DataTile.js';\nimport {expandUrl, pickUrl, renderXYZTemplate} from '../uri.js';\n\n/**\n * Image tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns an {@link import(\"../DataTile.js\").ImageLike image} or a promise for the same.\n *\n * @typedef {function(number, number, number, import(\"./DataTile.js\").LoaderOptions):(import(\"../DataTile.js\").ImageLike|Promise<import(\"../DataTile.js\").ImageLike>)} Loader\n */\n\n/**\n * @typedef {function(number, number, number, import(\"./DataTile.js\").LoaderOptions):string} UrlGetter\n */\n\n/**\n * @typedef {string | Array<string> | UrlGetter} UrlLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {UrlLike} [url] The image URL template.  In addition to a single URL template, an array of URL templates or a function\n * can be provided.  If a function is provided, it will be called with z, x, y tile coordinates and loader options and should\n * return a URL.\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns an {@link import(\"../DataTile.js\").ImageLike image} for a tile or a promise for the same.\n * The promise should not resolve until the image is loaded.  If the `url` option is provided, a loader will be created.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=true] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.\n * @property {import('./DataTile.js').CrossOriginAttribute} [crossOrigin='anonymous'] The crossOrigin property to pass to loaders for image data.\n */\n\nconst loadError = new Error('Image failed to load');\n\n/**\n * @param {string} template The image url template.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {import('./DataTile.js').LoaderOptions} options The loader options.\n * @return {Promise<HTMLImageElement>} Resolves with a loaded image.\n */\nfunction loadImage(template, z, x, y, options) {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.crossOrigin = options.crossOrigin ?? null;\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', () => reject(loadError));\n    image.src = renderXYZTemplate(template, z, x, y, options.maxY);\n  });\n}\n\n/**\n * @param {Array<string>} templates The url templates.\n * @return {Loader} The image loader.\n */\nfunction makeLoaderFromTemplates(templates) {\n  return function (z, x, y, options) {\n    const template = pickUrl(templates, z, x, y);\n    return loadImage(template, z, x, y, options);\n  };\n}\n\n/**\n * @param {UrlGetter} getter The url getter.\n * @return {Loader} The image loader.\n */\nfunction makeLoaderFromGetter(getter) {\n  return function (z, x, y, options) {\n    const url = getter(z, x, y, options);\n    return loadImage(url, z, x, y, options);\n  };\n}\n\n/**\n * @param {UrlLike} url The URL-like option.\n * @return {Loader} The tile loader.\n */\nfunction makeLoaderFromUrlLike(url) {\n  /**\n   * @type {Loader}\n   */\n  let loader;\n\n  if (Array.isArray(url)) {\n    loader = makeLoaderFromTemplates(url);\n  } else if (typeof url === 'string') {\n    const urls = expandUrl(url);\n    loader = makeLoaderFromTemplates(urls);\n  } else if (typeof url === 'function') {\n    loader = makeLoaderFromGetter(url);\n  } else {\n    throw new Error(\n      'The url option must be a single template, an array of templates, or a function for getting a URL',\n    );\n  }\n  return loader;\n}\n\nlet keyCount = 0;\n\n/**\n * @param {UrlLike} url The URL-like option.\n * @return {string} A key for the URL.\n */\nfunction keyFromUrlLike(url) {\n  if (Array.isArray(url)) {\n    return url.join('\\n');\n  }\n\n  if (typeof url === 'string') {\n    return url;\n  }\n\n  ++keyCount;\n  return 'url-function-key-' + keyCount;\n}\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @extends DataTileSource<import(\"../ImageTile.js\").default>\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass ImageTileSource extends DataTileSource {\n  /**\n   * @param {Options} [options] DataTile source options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {Loader}\n     */\n    let loader = options.loader;\n\n    /**\n     * @type {string}\n     */\n    let key;\n\n    if (options.url) {\n      loader = makeLoaderFromUrlLike(options.url);\n      key = keyFromUrlLike(options.url);\n    }\n\n    /**\n     * @type {import('./Source.js').State}\n     */\n    const state = !loader ? 'loading' : options.state;\n\n    const wrapX = options.wrapX === undefined ? true : options.wrapX;\n\n    super({\n      loader: loader,\n      key: key,\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize,\n      gutter: options.gutter,\n      maxResolution: options.maxResolution,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      state: state,\n      wrapX: wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== false,\n      crossOrigin: options.crossOrigin,\n    });\n  }\n\n  /**\n   * @param {UrlLike} url The new URL.\n   * @api\n   */\n  setUrl(url) {\n    const loader = makeLoaderFromUrlLike(url);\n    this.setLoader(loader);\n    this.setKey(keyFromUrlLike(url));\n    if (this.getState() !== 'ready') {\n      this.setState('ready');\n    }\n  }\n}\n\nexport default ImageTileSource;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}